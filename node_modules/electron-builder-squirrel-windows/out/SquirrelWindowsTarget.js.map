{"version":3,"sources":["../src/SquirrelWindowsTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvalidConfigurationError, log, isEmptyOrSpaces } from \"builder-util\"\nimport { getBinFromUrl } from \"app-builder-lib/out/binDownload\"\nimport { Arch, getArchSuffix, SquirrelWindowsOptions, Target } from \"app-builder-lib\"\nimport { WinPackager } from \"app-builder-lib/out/winPackager\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { convertVersion, SquirrelBuilder, SquirrelOptions } from \"./squirrelPack\"\n\nexport default class SquirrelWindowsTarget extends Target {\n  //tslint:disable-next-line:no-object-literal-type-assertion\n  readonly options: SquirrelWindowsOptions = {...this.packager.platformSpecificBuildOptions, ...this.packager.config.squirrelWindows} as SquirrelWindowsOptions\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"squirrel\")\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    const packager = this.packager\n    const version = packager.appInfo.version\n    const sanitizedName = sanitizeFileName(this.appName)\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    const setupFile = packager.expandArtifactNamePattern(this.options, \"exe\", arch, \"${productName} Setup ${version}.${ext}\")\n    const packageFile = `${sanitizedName}-${convertVersion(version)}-full.nupkg`\n\n    const installerOutDir = path.join(this.outDir, `squirrel-windows${getArchSuffix(arch)}`)\n    const artifactPath = path.join(installerOutDir, setupFile)\n\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: \"Squirrel.Windows\",\n      file: artifactPath,\n      arch,\n    })\n\n    if (arch === Arch.ia32) {\n      log.warn(\"For windows consider only distributing 64-bit or use nsis target, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const distOptions = await this.computeEffectiveDistOptions()\n    const squirrelBuilder = new SquirrelBuilder(distOptions as SquirrelOptions, installerOutDir, packager)\n    await squirrelBuilder.buildInstaller({setupFile, packageFile}, appOutDir, this.outDir, arch)\n\n    await packager.info.callArtifactBuildCompleted({\n      file: artifactPath,\n      target: this,\n      arch,\n      safeArtifactName: `${sanitizedName}-Setup-${version}${getArchSuffix(arch)}.exe`,\n      packager: this.packager,\n    })\n\n    const packagePrefix = `${this.appName}-${convertVersion(version)}-`\n    packager.info.dispatchArtifactCreated({\n      file: path.join(installerOutDir, `${packagePrefix}full.nupkg`),\n      target: this,\n      arch,\n      packager,\n    })\n    if (distOptions.remoteReleases != null) {\n      packager.info.dispatchArtifactCreated({\n        file: path.join(installerOutDir, `${packagePrefix}delta.nupkg`),\n        target: this,\n        arch,\n        packager,\n      })\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: path.join(installerOutDir, \"RELEASES\"),\n      target: this,\n      arch,\n      packager,\n    })\n  }\n\n  private get appName() {\n    return this.options.name || this.packager.appInfo.name\n  }\n\n  async computeEffectiveDistOptions(): Promise<SquirrelOptions> {\n    const packager = this.packager\n    let iconUrl = this.options.iconUrl\n    if (iconUrl == null) {\n      const info = await packager.info.repositoryInfo\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.info.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new InvalidConfigurationError(\"squirrelWindows.iconUrl is not specified, please see https://www.electron.build/configuration/squirrel-windows#SquirrelWindowsOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.options)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const appName = this.appName\n    const options: SquirrelOptions = {\n      name: appName,\n      productName: this.options.name || appInfo.productName,\n      appId: this.options.useAppIdAsId ? appInfo.id : appName,\n      version: appInfo.version,\n      description: appInfo.description,\n      // better to explicitly set to empty string, to avoid any nugget errors\n      authors: appInfo.companyName || \"\",\n      iconUrl,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: parseInt((process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || packager.compression === \"store\" ? 0 : 9) as any, 10),\n      vendorPath: await getBinFromUrl(\"Squirrel.Windows\", \"1.9.0\", \"zJHk4CMATM7jHJ2ojRH1n3LkOnaIezDk5FAzJmlSEQSiEdRuB4GGLCegLDtsRCakfHIVfKh3ysJHLjynPkXwhQ==\"),\n      ...this.options as any,\n    }\n\n    if (isEmptyOrSpaces(options.description)) {\n      options.description = options.productName\n    }\n\n    if (options.remoteToken == null) {\n      options.remoteToken = process.env.GH_TOKEN || process.env.GITHUB_TOKEN\n    }\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    if (this.options.remoteReleases === true) {\n      const info = await packager.info.repositoryInfo\n      if (info == null) {\n        log.warn(\"remoteReleases set to true, but cannot get repository info\")\n      }\n      else {\n        options.remoteReleases = `https://github.com/${info.user}/${info.project}`\n        log.info({remoteReleases: options.remoteReleases}, `remoteReleases is set`)\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (const name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new InvalidConfigurationError(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    log.warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new InvalidConfigurationError(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}\n"],"sourceRoot":""}
